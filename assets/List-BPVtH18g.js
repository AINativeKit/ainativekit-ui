import{j as e}from"./jsx-runtime-DF2Pcvd1.js";import{R as C}from"./index-B2-qRKKC.js";import{c as f}from"./Button-Dng2PzYd.js";import{A as M,S as d}from"./Alert-Dd8CbNX0.js";import{s as t}from"./ListItem-BU60guJh.js";const A=(N,l)=>{const{header:s,items:i,renderItem:m,emptyMessage:r="No items found.",showDividers:g=!0,loading:j=!1,loadingItems:v=3,error:b=!1,errorTitle:w="Failed to load items",errorMessage:T,onErrorRetry:R,emptyTitle:c="No items",emptyState:h,className:u,...p}=N,y=()=>{if(!(s!=null&&s.thumbnail))return null;if(typeof s.thumbnail=="string"){const a=s.thumbnailAlt||(typeof s.title=="string"?s.title:"List thumbnail");return e.jsx("div",{className:t.headerMedia,children:e.jsx("img",{src:s.thumbnail,alt:a,className:t.headerMediaImage})})}return e.jsx("div",{className:t.headerMedia,children:s.thumbnail})},q=()=>i.length>0?i.map((n,o)=>m(n,o)):Array.from({length:v}).map((n,o)=>e.jsx("div",{className:t.listItemWrapper,style:{pointerEvents:"none"},children:e.jsxs("div",{className:t.listItem,children:[e.jsx("div",{className:t.itemMedia,children:e.jsx(d,{width:40,height:40,animation:!0,style:{borderRadius:"var(--ai-radius-md)"}})}),e.jsxs("div",{className:t.itemBody,children:[e.jsx("div",{className:t.itemHeader,children:e.jsx(d,{width:"60%",height:16,animation:!0})}),e.jsx("div",{className:t.itemSubtitleRow,style:{marginTop:"var(--ai-spacing-2)"},children:e.jsx(d,{width:"40%",height:14,animation:!0})})]}),e.jsx("div",{className:t.itemTrailing,children:e.jsx(d,{width:60,height:14,animation:!0})})]})},o));if(b)return e.jsxs("div",{ref:l,className:f(t.listContainer,u),...p,children:[s&&e.jsx("div",{className:t.listHeader,children:e.jsxs("div",{className:t.headerRow,children:[y(),e.jsxs("div",{className:t.headerText,children:[e.jsx("h2",{className:t.headerTitle,children:s.title}),s.subtitle&&e.jsx("p",{className:t.headerSubtitle,children:s.subtitle})]})]})}),e.jsx("div",{className:t.errorContainer,children:e.jsx(M,{layout:"card",title:w,message:T,onAction:R})})]});const I=()=>h?e.jsx("div",{className:t.emptyContainer,children:h}):c||r?e.jsx("div",{className:t.emptyContainer,children:e.jsxs("div",{className:t.emptyContent,children:[e.jsx("div",{className:t.emptyTitle,children:c}),r&&e.jsx("div",{className:t.emptyMessage,children:r})]})}):e.jsx("div",{className:t.emptyState,children:r});return e.jsxs("div",{ref:l,className:f(t.listContainer,u),...p,children:[s&&e.jsx("div",{className:t.listHeader,children:e.jsxs("div",{className:t.headerRow,children:[y(),e.jsxs("div",{className:t.headerText,children:[e.jsx("h2",{className:t.headerTitle,children:s.title}),s.subtitle&&e.jsx("p",{className:t.headerSubtitle,children:s.subtitle})]}),s.action&&e.jsx("div",{className:t.headerActionDesktop,children:s.action})]})}),e.jsx("div",{className:t.listItems,"data-show-dividers":g,children:j?q():i.length>0?i.map((a,n)=>m(a,n)):I()}),(s==null?void 0:s.action)&&e.jsx("div",{className:t.headerActionMobile,children:s.action})]})},x=C.forwardRef(A);x.displayName="List";x.__docgenInfo={description:"",methods:[],displayName:"List",props:{header:{required:!1,tsType:{name:"ListHeaderProps"},description:"Optional header configuration (title, subtitle, thumbnail, actions)."},items:{required:!0,tsType:{name:"Array",elements:[{name:"T"}],raw:"T[]"},description:"Array of data items to render."},renderItem:{required:!0,tsType:{name:"signature",type:"function",raw:"(item: T, index: number) => ReactNode",signature:{arguments:[{type:{name:"T"},name:"item"},{type:{name:"number"},name:"index"}],return:{name:"ReactNode"}}},description:"Render function for list rows."},emptyMessage:{required:!1,tsType:{name:"ReactNode"},description:`Message to show when the list is empty.
@default "No items found."`},showDividers:{required:!1,tsType:{name:"boolean"},description:`Controls whether divider lines are rendered between rows.
@default true`},loading:{required:!1,tsType:{name:"boolean"},description:`Loading state - renders items with loading context or skeleton items
@default false

@remarks
When true:
- If items array has content, they will be rendered (pass items with loading prop for best UX)
- If no items, renders skeleton list items based on loadingItems count`},loadingItems:{required:!1,tsType:{name:"number"},description:`Number of skeleton items to show when loading and no items provided
@default 3`},error:{required:!1,tsType:{name:"boolean"},description:`Error state - shows error message
@default false`},errorTitle:{required:!1,tsType:{name:"string"},description:`Custom error title
@default 'Failed to load items'`},errorMessage:{required:!1,tsType:{name:"string"},description:"Custom error message"},onErrorRetry:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Error retry handler - shows retry button when provided"},emptyTitle:{required:!1,tsType:{name:"string"},description:`Empty state title when no items provided
@default 'No items'`},emptyState:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Custom empty state content"}},composes:["Omit"]};export{x as L};
